**Starting Your Django Project**
1.1 Creating a new Django Project
    - While in the folder you'd like the project to be, use the command:
      "django-admin startproject [project-name] ."
      - Here, the "project-name" is what I'd like to call the main folder. the
        "." tells the django command to create this project in the current folder.
    - Once a project has been added, running the "manage.py" file will execute
      the project files. In the case of this project, the command looks like:
      C:/Python310/python.exe 
      "c:/Users/Christopher Porter/Desktop/DjangoEssentialTraining/manage.py"
      runserver
1.2 Minimum working page
    - When developing a project, it's important to compartmentalize unique elements
      into separate components called "apps". 
        - To add an app, use the command:
        "django-admin startapp [app-name]"
        - Here, the "app-name" is what I'd like to call subsequent apps within the
          project. Once executed, a new folder called "app-name" will appear in the DIR
    - Once an app is added, remember to add the app folder's name to the list of
      INSTALLED_APPS in settings.py.
    - Apps can output information to a webpage by receiving a request, and outputting an
      HttpResponse.
        - In the python file where this is processed, be sure to add the proper import:
        "from django.http import HttpResponse"
        - This feature would be used in default "views.py" file of an app.
    - Once the app view has a routing function created, the "urls.py" in the main project
      folder should include an import statement referencing that views.py file, as well 
      as a formal "path" statement inside the "urlpatterns" list.
1.2.1 MVT or Model|View|Template Framework
    - Views are responsible for handling requests and responses
1.3 Creating your First Django Template
    - In an app, you can create a template folder containing html files. These files
      are then passed through the background Django Template Language mechanisms such
      that data can be passed into variables located in the HTML.
1.4 Django apps and the Concept of Modularization
    - So, literally ignore how it was done previously. By importing the home view
      into the urls.py of "smartnotes", we create a dependency (not very cash money).
        - Instead, a urls.py file will be create directly inside the home DIR. The 
          required functions will look similar to how they looked in the main urls.py
    - In the main project folder's urls.py (smartnotes), instead of referencing 
      the view file in "home" directly, we simply "include" a reference of the file 
      path to a "urls.py" inside home (which then routes to the home's view)

**Django Built-In User Management**
2.1 Create users in Django
    - When running a project locally, in my case, I would type in "localhost:8000"
      followed by whatever view I'm trying to reach, i.e., "localhost:8000/home".
        - By typing in "localhost:8000/admin" we'll automatically see a page that 
          prompts the user for a username and password.
    - We can initiate the admin creation process by using the command ->
        - "python manage.py migrate". This will automatically import necessary
          resources and data points used in the authentication process.
    - To instantiate admin priviledges, we need to create a super user. Do so with ->
        - "python manage.py createsuperuser". It will then ask for what username, 
          e-mail, and password you'd like.
2.2 Django Admin: Easily Visualizing and Creating data
    - Once an admin is created, running the server again and use the admin specific
      URL to access the login page. Login with the default login setup earlier.
        - "Groups" & "Users" are both data tables. By opening "Users" we should see
          the "admin" user already present in the list.
        - To add a new user, click the "ADD USER +" button in the top right. type
          in the preferred username and password, then click "SAVE".
        - This new user should now be present in the "Users" data table. To delete
          this user, select the box next to it, and in the "Action" drop down menu,
          choose "delete selected users". The home page shows a list of recent actions
          and should include a statement about the deleted user.
2.3 User Authentication 
    - So, even if someone attempts to access the admin page, we need a way to 
      prevent unauthorized access.
        - To do this, we created another HTML view inside the "home" templates folder.
          This view contains a basic statement saying the user doesn't have access.
        - To obtain this response and have the webpage tell the user this is the case,
          there are three things we need to do.
            - Create a function, similar to home, in the views.py file, indicating 
              an HTTP request and response pipeline for the newly created 
              "authorized.html" file.
            - Within the views.py file, we need to import an already provided module
              to decorate the potentially required error message. 
                - "from django.contrib.auth.decorators import login_required". Once 
                  imported, simply add the decorator tag "@login_required" above the
                  new function.
            - Lastly, we need to add the correct pipeline path inside the urls.py 
              file in the same parent folder.
        - Django will automatically check for whether a user is signed in. If so,
          the redirect will occur correctly. If a user logged out, then trying to
          access the authorized template will result in an error.
    - Establishing Good Flow - "Prompting a user to sign-in" when attempting to
      access a restricted area.
        - To do this in Django, all we need to do is add a perameter to the
          "@login_required" decorator inside views.py.
            - So instead of "@login_required" it would be "@login_required(login_url='/admin')"
            - By doing this, Django will automatically redirect the session to the login page,
              which is by default setup as the "admin" endpoint or localhost:8000/admin.
**How Django Interacts with Databases**
3.1 Introduction to Django ORM
    - Object Relational Mapping (ORM) System ->
        - Handles database communications and changes
        - Write classes that can be transformed using migrations into database tables
            - Each class (model), is a database table. Each column is a class attribute
    - How to transform a model
        - Take a class and create migrations. These migrations contain step by step
          instructions for what a database must do to apply the changes made in the code
          - Develop a "Class", Create "migrations", actually "migrate", apply changes in "DB".
3.2 Creating your First Model
    - A model should be represented by a unique "app". In this example, I created the 
      "notes" app by using the command "django-admin startapp notes"
        - This created the "notes" folder and scaffolded standard files inside it
        - IMPORTANT: When adding a new app, remember to add the app name to the settings.py 
          file of the project's main folder (smartnotes)
    - When defining a class model (inside models.py) remember to make the class inherit 
      from models.Model -->
        - "class Notes(models.Model):"
    - Each attribute in the model can pull from predefined elements inside the model class.
        - i.e. models.Charfield, models.textField(), etc. See "models.py" in "notes".
    - CREATING MIGRATIONS 
        - Once a model is defined, we can tell Django to make a migration instruction
          set that represents how to translate the model into a database automatically
        - RUN THE COMMAND: "python manage.py makemigrations"
            - This automatically searches for models inside the project's apps. If one is
              found, two things occur -->
                - 1. A "migrations" folder is created in the models' folder.
                - 2. Inside "migrations" there is now a file called "0001_initial.py"
    - MIGRATING NEW MIGRATIONS
        - Once a migration instruction set is created, it needs to migrated to the database.
          This way, the database now has a record of all pertinent object names and data types.
        - RUN THE COMMAND: "python manage.py migrate"
            - This automatically pushes these any migrations sets that haven't been added
              yet, to the database. Any subsequent "migrates" with this command should shows
              "no migrations to appy"
3.3 Using Admin for Data Creation/Manipulation
    - Admin Console - User's vs. Class models
        - User entities will automatically show up in the django admin console. Class models
          must be manually registered.
    - Registering a model
        - Navigate to the folder containing your class, there should be a premade admin.py
          file.
        - See the comments inside this file to understand the steps taken. Once completed,
          the "notes" app will show up with its own section in the Djando admin interface
    
          
